// Generated by CoffeeScript 1.10.0
(function() {
  var UPnPHelper;

  UPnPHelper = (function() {
    function UPnPHelper(ip_addr, veraidx) {
      this._ipaddr = trim(ip_addr || '');
      this._veraidx = veraidx || 0;
      this._proxyresultarea = "altuictrl" + _veraidx;
      if (this._ipaddr) {
        this._urlhead = "http://" + this._ipaddr + "/port_3480/data_request";
      } else {
        this._urlhead = window.location.pathname;
      }
      this._proxyhead = "?id=lr_ALTUI_Handler&command=proxyget&resultName=none&newUrl=";
    }

    UPnPHelper.prototype.proxify = function(url) {
      if (this._ipaddr) {
        return this._proxyhead + encodeURIComponent(url);
      } else {
        return url;
      }
    };

    UPnPHelper.prototype.proxifySoap = function(url) {
      if (_ipaddr) {
        return "?id=lr_ALTUI_Handler&command=proxysoap&action={0}&newUrl={1}&envelop={2}&body={3}";
      } else {
        return url;
      }
    };

    UPnPHelper.prototype.getIpAddr = function() {
      return this._ipaddr;
    };

    UPnPHelper.prototype.getUrlHead = function() {
      return this.urlhead;
    };

    UPnPHelper.prototype._veraUrl = function(paramDict) {
      return this.proxify((getUrlHead()) + "?" + ($.params(paramDict)));
    };

    UPnPHelper.prototype._buildAttributeSetUrl = function(deviceID, attribute, value) {
      return this._veraUrl({
        id: "lu_variableset",
        DeviceNum: deviceID,
        Variable: attribute,
        Value: value
      });
    };

    UPnPHelper.prototype._buildVariableSetUrl = function(deviceID, service, varName, varValue) {
      return this._veraUrl({
        id: "variableset",
        DeviceNum: deviceID,
        serviceid: service,
        Variable: attribute,
        Value: value
      });
    };

    UPnPHelper.prototype._buildUPnPGetJobStatusUrl = function(jobID) {
      return this._veraUrl({
        id: "jobstatus",
        job: jobID
      });
    };

    UPnPHelper.prototype._buildSceneCreateUrl = function(scenejson) {
      return this._veraUrl({
        id: "scene",
        action: "create",
        json: scenejson
      });
    };

    UPnPHelper.prototype.buildUPnpGetFileUrl = function(file) {
      return this.proxify(getUrlHead().replace("data_request", "luvd/") + file);
    };

    UPnPHelper.prototype._buildUPnpUpdatePluginVersion = function(pluginid, version) {
      return this._veraUrl({
        id: "action",
        serviceId: "urn:micasaverde-com:serviceId:HomeAutomationGateway1",
        action: "CreatePlugin",
        PluginNum: pluginid,
        Version: version
      });
    };

    UPnPHelper.prototype._buildUPnPUpdatePlugin = function(pluginid) {
      return this._veraUrl({
        id: "update_plugin",
        Plugin: pluginid
      });
    };

    UPnPHelper.prototype._buildUPnPActionUrl = function(deviceID, service, action, params) {
      var args, i, p;
      args = {
        id: "action",
        output_format: "json",
        DeviceNum: deviceID,
        serviceId: service,
        action: action
      };
      for (p in params) {
        i = params[p];
        args[i] = p;
      }
      return this._veraUrl(args);
    };

    UPnPHelper.prototype._buildUPnpRunLua = function(code) {
      return this._veraUrl({
        id: "lu_action",
        serviceId: "urn:micasaverde-com:serviceId:HomeAutomationGateway1",
        action: "RunLua",
        Code: code
      });
    };

    UPnPHelper.prototype._buildHAGSoapUrl = function() {
      return this.getUrlHead().replace('/port_3480/data_request', '/port_49451/upnp/control/hag');
    };

    UPnPHelper.prototype.unproxifyResult = function(data, textStatus, jqXHR, cbfunc) {
      var cbData;
      if (!$.isFunction(cbfunc)) {
        return;
      }
      cbData = data;
      if (this._ipaddr) {
        cbData = data[0] === "1" ? data.substr(2) : null;
      }
      return cbFunc(cbData, textStatus, jqXHR);
    };

    UPnPHelper.prototype._exec = function(url, cbfunc, mimetype) {
      var options;
      options = {
        url: url,
        type: "GET",
        beforeSend: function(xhr) {
          return xhr.overrideMimeType("text/plain");
        }
      };
      if (mimetype == null) {
        return options.dataType = "text";
      }
    };

    UPnPHelper.prototype.UPnpSetAttr = function(deviceID, attribute, value, cbfunc) {
      var obj1, obj2;
      return this.ModifyUserData({
        devices: (
          obj1 = {},
          obj1["devices_" + deviceID] = (
            obj2 = {},
            obj2["" + attribute] = value,
            obj2
          ),
          obj1
        )
      }, cbfunc);
    };

    UPnPHelper.prototype.UPnPSetAttrUI7 = function(deviceID, attribute, value, cbfunc) {
      return this._exec(this._buildAttributeSetUrl(deviceID, attribute, value), cbfunc);
    };

    UPnPHelper.prototype.UPnPSet = function(deviceID, service, varName, varValue) {
      return this._exec(this._buildVariableSetUrl(deviceID, service, varName, varValue));
    };

    UPnPHelper.prototype.UPnPAction = function(deviceID, service, action, params, cbfunc) {
      return this._exec(this._buildUPnPActionUrl(deviceID, service, action, params), cbfunc);
    };

    UPnPHelper.prototype.UPnPGetJobStatus = function(jobID, cbfunc) {
      return this._exec(this._buildUPnPGetJobStatusUrl(jobID), cbfunc);
    };

    UPnPHelper.prototype.UPnPGetFile = function(devicefile, cbfunc) {
      var lastfour, mimetype;
      mimetype = "text/plain";
      lastfour = devicefile.slice(-4);
      if (lastfour === ".xml" && this._veraidx === 0) {
        mimetype = "text/xml";
      }
      return this._exec(this.buildUPnPGetFileUrl(devicefile), function(data, textStatus, jqXHR) {
        if (jqXHR.responseXML) {
          data = new XMLSerializer().serializeToString(jqXHR.responseXML);
          jqXHR.responseText = data;
        }
        return cbfunc(data, jqXHR);
      }, mimetype);
    };

    UPnPHelper.prototype.UPnPDeletePlugin = function(pluginid, cbfunc) {
      var url, xml;
      AltuiDebug.debug("UPnPDeletePlugin(" + pluginid);
      xml = "<s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/' \n            s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'>\n    <s:Body>\n        <u:DeletePlugin \n            xmlns:u='urn:schemas-micasaverde-org:service:HomeAutomationGateway:1'>\n            <PluginNum>" + pluginid + "</PluginNum>\n        </u:DeletePlugin>\n    </s:Body>\n</s:Envelope>";
      url = this._buildHAGSoapUrl();
      return $.ajax({
        url: url,
        type: "POST",
        dataType: "text",
        contentType: "text/xml;charset=UTF-8",
        processData: false,
        data: xml,
        headers: {
          SOAPACTION: '"urn:schemas-micasaverde-org:service:HomeAutomationGateway:1#DeletePlugin"'
        }
      }).done(function(data, textStatus, jqXHR) {
        return this._uproxifyResult(data, textStatus, jqXHR, function(data, textStatus, jqXHR) {
          var re, result;
          if ($.isFunction(cbfunc)) {
            re = /<OK>(.+)<\/OK>/;
            result = data.match(re);
            return cbfunc(result !== null && result.length >= 2 ? result[1] : null);
          }
        });
      }).fail(function(jqXHR, textStatus, errorThrown) {
        if ($.isFunction(cbfunc)) {
          return cbfunc(null);
        }
      });
    };

    UPnPHelper.prototype.UPnPUpdatePluginVersion = function(pluginid, version, cbfunc) {
      return this._exec(this._buildUPnPUpdatePluginVersion(pluginid, version), cbfunc);
    };

    UPnPHelper.prototype.UPnPUpdatePlugin = function(pluginid, cbfunc) {
      return this._exec(this._buildUPnPUpdatePlugin(pluginid), cbfunc);
    };

    UPnPHelper.prototype.UPnPRunLua = function(code, cbfunc) {
      return this._exec(this._buildUPnPRunLua(code), cbFunc);
    };

    UPnPHelper.prototype.reloadEngine = function(cbfunc) {
      return this._exec(this._veraUrl({
        id: "reload"
      }, cbfunc));
    };

    UPnPHelper.prototype.renameDevice = function(device, newname, roomid) {
      var args, oldname;
      oldname = device.name;
      device.name = newname;
      device.dirty = true;
      args = {
        id: "device",
        action: "rename",
        device: device.id,
        name: newname
      };
      if (roomid != null) {
        args.room = roomid;
      }
      return this._exec(this._veraUrl(args), function(result) {
        if (result !== "OK") {
          return PageMessage.message(_T("Device modify failed!"), "warning");
        } else {
          return PageMessage.message(_T("Device modified!"), "success");
        }
      });
    };

    UPnPHelper.prototype.createDevice = function(descr, dfile, ifile, roomnum, cbfunc) {
      var params, url, xml;
      AltuiDebug.debug("createDevice(" + descr + "," + dfile + "," + ifile + "," + roomnum + ")");
      if (0) {
        xml = "<s:Envelope \n    xmlns:s='http://schemas.xmlsoap.org/soap/envelope/' \n    s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'>\n   <s:Body>\n        <u:CreateDevice \n            xmlns:u='urn:schemas-micasaverde-org:service:HomeAutomationGateway:1'>\n            <deviceType></deviceType>\n            <internalID></internalID>\n            <Description>" + descr + "</Description>\n            <UpnpDevFilename>" + dfile + "</UpnpDevFilename>\n            <UpnpImplFilename>" + ifile + "</UpnpImplFilename>\n            <IpAddress></IpAddress>\n            <MacAddress></MacAddress>\n            <DeviceNumParent>0</DeviceNumParent>\n            <RoomNum>" + roomnum + "</RoomNum>\n        </u:CreateDevice>\n   </s:Body>\n</s:Envelope>\n";
        url = this._buildHAGSoapUrl();
        return $.ajax({
          url: url,
          type: "POST",
          dataType: "text",
          contentType: "text/xml;charset=UTF-8",
          processData: false,
          data: xml,
          headers: {
            SOAPACTION: '"urn:schemas-micasaverde-org:service:HomeAutomationGateway:1#CreateDevice"'
          }
        }).done(function(data, textStatus, jqXHR) {
          return this._uproxifyResult(data, textStatus, jqXHR, function(data, textStatus, jqXHR) {
            var re, result;
            if ($.isFunction(cbfunc)) {
              re = /<DeviceNum>(\d+)<\/DeviceNum>/;
              result = data.match(re);
              return cbfunc(result !== null && result.length >= 2 ? result[1] : null);
            }
          });
        }).fail(function(jqXHR, textStatus, errorThrown) {
          if ($.isFunction(cbfunc)) {
            return cbfunc(null);
          }
        });
      } else {
        params = {
          Description: descr,
          UpnpDevFilename: dfile,
          UpnpImplFilename: ifile,
          RoomNum: roomnum,
          Reload: 1
        };
        return this.UPnPaction(0, "urn:micasaverde-com:serviceId:HomeAutomationGateway1", "CreateDevice", params, function(data, textStatus, jqXHR) {
          var obj;
          if (data != null) {
            PageMessage.message(_T("Create Device succeeded"), "success");
            if ($.isFunction(cbfunc)) {
              obj = JSON.parse(data);
              return cbfunc(obj["u:CreateDeviceResponse"]["DeviceNum"]);
            }
          } else {
            PageMessage.message(_T("Create Device faileD"), "danger");
            if ($.isFunction(cbfunc)) {
              return cbfunc(null);
            }
          }
        });
      }
    };

    UPnPHelper.prototype.ModifyUserData = function(user_data, cbfunc) {
      var target, url, url2, xml;
      target = {
        devices: {},
        scenes: {},
        sections: {},
        rooms: {},
        InstalledPlugins: [],
        PluginSettings: [],
        users: {}
      };
      $.extend(target, user_data);
      xml = "<s:Envelope \n    xmlns:s='http://schemas.xmlsoap.org/soap/envelope/' \n    s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'>\n    <s:Body>\n        <u:ModifyUserData \n            xmlns:u='urn:schemas-micasaverde-org:service:HomeAutomationGateway:1'>\n            <inUserData>\n                JSON.stringify(target).escapeXml();\n            </inUserData>\n            <DataFormat>json</DataFormat>\n        </u:ModifyUserData>\n    </s:Body>\n</s:Envelope>";
      url = this._buildHAGSoapUrl();
      if (this._ipaddr === '') {
        return $.ajax({
          url: url,
          type: "POST",
          dataType: "text",
          contentType: "text/xml;charset=UTF-8",
          processData: false,
          data: xml,
          headers: {
            SOAPACTION: '"urn:schemas-micasaverde-org:service:HomeAutomationGateway:1#ModifyUserData"'
          }
        }).done(function(data, textStatus, jqXHR) {
          return this._uproxifyResult(data, textStatus, jqXHR, function(data, textStatus, jqXHR) {
            if ($.isFunction(cbfunc)) {
              return cbfunc(data);
            }
          });
        }).fail(function(jqXHR, textStatus, errorThrown) {
          if ($.isFunction(cbfunc)) {
            return cbfunc(null);
          }
        });
      } else {
        url2 = this.proxifySoap(url).format("ModifyUserData", encodeURIComponent(url), encodeURIComponent(xml), encodeURIComponent(JSON.stringify(target)));
        return $.ajax({
          url: url,
          type: "GET",
          dataType: "text",
          contentType: "text/xml;charset=UTF-8",
          processData: false
        }).done(function(data, textStatus, jqXHR) {
          return this._uproxifyResult(data, textStatus, jqXHR, function(data, textStatus, jqXHR) {
            if ($.isFunction(cbfunc)) {
              return cbfunc(data);
            }
          });
        }).fail(function(jqXHR, textStatus, errorThrown) {
          if ($.isFunction(cbfunc)) {
            return cbfunc(null);
          }
        });
      }
    };

    UPnPHelper.prototype.sceneAction = function(sceneobj, cbfunc) {
      var id, newscene, obj1, target;
      newscene = $.extend(true, {}, sceneobj);
      delete newscene['altuiid'];
      if (0) {
        id = newscene.id;
        target = (
          obj1 = {
            devices: {},
            scenes: {},
            sections: {},
            rooms: {},
            InstalledPlugins: {},
            PluginSettings: {},
            users: {}
          },
          obj1["scenes_" + id] = newscene,
          obj1
        );
        return this.ModifyUserData(target, function(result) {
          if (result == null) {
            return PageMessage.message("Scene action failed!", "warning");
          } else {
            return PageMessage.message("Scene action succeeded! ", "a LUUP reload will happen now, ", "be patient", "success");
          }
        });
      } else {
        if (newscene.id === ALTUI_NEW_SCENE_ID) {
          delete newscene.id;
        }
        return this._exec(this._buildSceneCreateUrl(JSON.stringify(newscene), function(data, textStatus, jqXHR) {
          if ($.isFunction(cbfunc)) {
            return cbfunc(data, jqXHR);
          }
        }));
      }
    };

    return UPnPHelper;

  })();

}).call(this);
