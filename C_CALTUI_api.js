// Generated by CoffeeScript 1.10.0
(function() {
  var ALARM_PARTITION_ARMED, ALARM_PARTITION_BREACH, ALARM_PARTITION_DISARMED, ALARM_PARTITION_SID, ALARM_PARTITION_STAYARMED, Ajax, CAMDEVICE_FILE, CAMDEVICE_SID, CAMDEVICE_STYPE, CAM_AUTO_ARCH_SEC, CAM_AUTO_PRES_DAYS, CAM_DIRECT_URL, CAM_LIGHT_OPTIONS, CAM_PASSWORD, CAM_PRE_ROLL_BUFFER, CAM_RELATED_LIGHTS, CAM_RELATED_SENSORS, CAM_SENSOR_ARCHIVE_SEC, CAM_URL, CAM_USERNAME, DEVICEFILE_AV_MISC, DEVICEFILE_AV_SCENE, DEVICEFILE_BINARY_LIGHT, DEVICEFILE_CAMERA, DEVICEFILE_COMBO_DEVICE, DEVICEFILE_DIMMABLE_LIGHT, DEVICEFILE_DOOR_LOCK, DEVICEFILE_DOOR_SENSOR, DEVICEFILE_ENERGY_CALCULATOR, DEVICEFILE_GENERIC_IO, DEVICEFILE_HUMIDITY_SENSOR, DEVICEFILE_INSTEON_NETWORK, DEVICEFILE_IR_TRANSMITTER, DEVICEFILE_LIGHT_SENSOR, DEVICEFILE_MOTION_SENSOR, DEVICEFILE_MULTI_IO, DEVICEFILE_POWER_METER, DEVICEFILE_REMOTE_CONTROL, DEVICEFILE_SCENE_CONTROLLER, DEVICEFILE_SCENE_CONTR_LED, DEVICEFILE_SMOKE_SENSOR, DEVICEFILE_TEMPERATURE_SENSOR, DEVICEFILE_TEMP_LEAK_SENSOR, DEVICEFILE_THERMOSTAT, DEVICEFILE_USB_UIRT, DEVICEFILE_WINDOW_COVERING, DEVICEFILE_ZWAVE_NETWORK, DEVICETYPE_ALARM_PARTITION, DEVICETYPE_AMP, DEVICETYPE_AV_MISC, DEVICETYPE_BINARY_LIGHT, DEVICETYPE_CABLE, DEVICETYPE_CAMERA, DEVICETYPE_CAMERA2, DEVICETYPE_CD, DEVICETYPE_COMBO_DEVICE, DEVICETYPE_DIMMABLE_LIGHT, DEVICETYPE_DOOR_LOCK, DEVICETYPE_DOOR_SENSOR, DEVICETYPE_DVD_BLURAY, DEVICETYPE_ENERGY_CALCULATOR, DEVICETYPE_GENERIC_IO, DEVICETYPE_HOME_AUTO_GATEWAY, DEVICETYPE_HUMIDITY_SENSOR, DEVICETYPE_INSTEON_NETWORK, DEVICETYPE_IR_TRANSMITTER, DEVICETYPE_LIGHT_SENSOR, DEVICETYPE_MISC_HOME_CONTROL, DEVICETYPE_MOTION_SENSOR, DEVICETYPE_MULTI_IO, DEVICETYPE_POWER_METER, DEVICETYPE_RECEIVER, DEVICETYPE_REMOTE_CONTROL, DEVICETYPE_SATELLITE, DEVICETYPE_SCENE, DEVICETYPE_SCENE_CONTROLLER, DEVICETYPE_SCENE_CONTR_LED, DEVICETYPE_SERIALPORT, DEVICETYPE_SMOKE_SENSOR, DEVICETYPE_TEMPERATURE_SENSOR, DEVICETYPE_TEMP_LEAK_SENSOR, DEVICETYPE_THERMOSTAT, DEVICETYPE_TV, DEVICETYPE_USB_UIRT, DEVICETYPE_VCR_DVR, DEVICETYPE_VIDEO_ACCESSORY, DEVICETYPE_VIRTUAL_DEVICE, DEVICETYPE_WINDOW_COVERING, DEVICETYPE_ZWAVE_NETWORK, DEVICE_CATEGORY_ALARM_PANEL, DEVICE_CATEGORY_ALARM_PARTITION, DEVICE_CATEGORY_AV, DEVICE_CATEGORY_CAMERA, DEVICE_CATEGORY_DIMMABLE_LIGHT, DEVICE_CATEGORY_DOOR_LOCK, DEVICE_CATEGORY_GENERIC_IO, DEVICE_CATEGORY_GENERIC_SENSOR, DEVICE_CATEGORY_HUMIDITY, DEVICE_CATEGORY_HVAC, DEVICE_CATEGORY_INSTEON_INT, DEVICE_CATEGORY_INTERFACE, DEVICE_CATEGORY_IR_TX, DEVICE_CATEGORY_LIGHT, DEVICE_CATEGORY_POWER_METER, DEVICE_CATEGORY_REMOTE_CONTROL, DEVICE_CATEGORY_SCENE_CONTROLLER, DEVICE_CATEGORY_SECURITY_SENSOR, DEVICE_CATEGORY_SERIAL_PORT, DEVICE_CATEGORY_SWITCH, DEVICE_CATEGORY_TEMPERATURE, DEVICE_CATEGORY_WINDOW_COV, DEVICE_CATEGORY_ZWAVE_INT, DL_CLEAR_PIN, DL_CLEAR_PIN_VALID, DL_NUM_SCHEDULES, DL_PIN_CODES, DL_SET_PIN, DL_SET_PIN_DATE, DL_SET_PIN_WEEK, DL_SET_TARGET, DL_SID, DL_SL_LOCK_BUTTON, DL_SL_LOCK_FAILURE, DL_SL_LOW_BATTERY, DL_SL_PIN_FAILED, DL_SL_UNAUTH_USER, DL_SL_USER_CODE, DL_SL_VERY_LOW_BATTERY, DL_STATUS, DL_TARGET, DomPurify, ENE_ACTUAL, ENE_KWH, ENE_SID, ENE_USER_SUPPLIED, ENE_WATTS, GIO_DEFAULT_STATE, GIO_IS_INPUT, GIO_SID, HADEVICE_FILE, HADEVICE_SID, HADEVICE_STYPE, HAD_AUTO_CONFIGURE, HAD_BATTERY_ALARM, HAD_BATTERY_DATE, HAD_BATTERY_LEVEL, HAD_COMM_FAILURE, HAD_CONFIGURED, HAD_DOCUMENTATION, HAD_ENERGY_LOG, HAD_FIRST_CONFIGURED, HAD_IGNORE_ROOM, HAD_IOPORT_DEVICE, HAD_IOPORT_DEVICE_XREF, HAD_IOPORT_MAX_TIME, HAD_IOPORT_PORT, HAD_JOBID, HAD_LAST_TIME_CHECK, HAD_LAST_TIME_OFFSET, HAD_LAST_UPDATE, HAD_POLL, HAD_POLLING_ENABLED, HAD_POLL_MIN_DELAY, HAD_RECONFIGURE, HAD_REMOVE, HAD_REVERSE, HAD_SET_POLL_FREQUENCY, HAD_STRESS_TEST, HAD_TOGGLE_STATE, HAGEVICE_FILE, HAGEVICE_SID, HAGEVICE_STYPE, HAG_ACTIVE_SCENES, HAG_DATAVERSION_STATUS, HAG_DATAVERSION_USERDATA, HAG_ENERGY_DOW, HAG_ENERGY_TIME_OF_DAY, HAG_GET_USER_DATA, HAG_IMPORT_UPNP_DEVICE, HAG_LOG_IP_REQUEST, HAG_MODIFY_CREATE_DEVICE, HAG_MODIFY_CREATE_PLUGIN, HAG_MODIFY_CREATE_PLUGIN_DEVICE, HAG_MODIFY_DELETE_DEVICE, HAG_MODIFY_DELETE_PLUGIN, HAG_MODIFY_GET_ACTIONS, HAG_MODIFY_GET_STATUS, HAG_MODIFY_GET_VARIABLE, HAG_MODIFY_SET_VARIABLE, HAG_MODIFY_USER_DATA, HAG_NUM_LIGHTS, HAG_PROCESS_CHILD, HAG_RELOAD, HAG_RUN_LUA, HAG_RUN_SCENE, HAG_THERMOSTAT_ON, HUM_CURRENT, HUM_SID, HVACCOOL_SID, HVACF_SET_MODE, HVACF_SID, HVACF_STATUS, HVACHC_CURRENTSP, HVACHC_SETPOINT, HVACHEAT_SID, HVACO_SET_MODE, HVACO_SID, HVACO_STATUS, HVACS_SID, HVACS_STATE, INDEVICE_FILE, INDEVICE_SID, INDEVICE_STYPE, IND_ASSOCIATION_GET, IND_ASSOCIATION_SET, IND_CAPABILITIES, IND_CONFIG, IND_LAST_RESET, IND_LAST_ROUTE_UPD, IND_LAST_WAKEUP, IND_MANUF_INFO, IND_MULTCH_CAPABIL, IND_MULTCH_ENDPOINT, IND_NEIGHBORS, IND_POLL_SETTINGS, IND_SCENES_AS_EVENTS, IND_UPDATED_NAME, IND_VARIABLES_GET, IND_VARIABLES_SET, IND_VERSION_INFO, IND_WAKEUP_INTERVAL, INN_ADD_NODES, INN_COM_PORT, INN_FILE, INN_HOME_ID, INN_INCLUSION_MODE, INN_LAST_ERROR, INN_LAST_UPDATE, INN_LOCK_COM_PORT, INN_MULTIPLE, INN_NET_STATUS_ID, INN_NET_STATUS_TEXT, INN_NODETYPE, INN_NODE_ID, INN_POLL_DELAY_DEADTIME, INN_POLL_DELAY_INITIAL, INN_POLL_ENABLED, INN_POLL_FREQUENCY, INN_POLL_MINDELAY, INN_REMOVE_NODES, INN_RESET_MODE, INN_RESET_NETWORK, INN_ROLE, INN_SEND_DATA, INN_SID, INN_SIMULATE_INCOMING, INN_SL_X10_CODE, INN_STOP_ADDREM_NODES, INN_STYPE, INN_TIMEOUT, INN_VERSION_INFO, IRT_SENDPRONTO, IRT_SID, IR_PROPRIETARY, IR_SID, Interface, LIGHT_CURRENT, LIGHT_SID, PTZ_DOWN, PTZ_FILE, PTZ_IN, PTZ_LEFT, PTZ_OUT, PTZ_RIGHT, PTZ_SID, PTZ_STYPE, PTZ_UP, SCL_LIGHT_SETTINGS, SCL_SET_LIGHT, SCL_SID, SCR_FIRES_OFF_EVENTS, SCR_LAST_SCENE_ID, SCR_LAST_SCENE_TIME, SCR_MANAGE_LEDS, SCR_NUM_BUTTONS, SCR_SCENES, SCR_SCENE_SHORTCUTS, SCR_SID, SCR_SL_SCENE_ACTIVATED, SCR_SL_SCENE_DEACTIVATED, SERVICE_TYPE_IR_TRANSMITTER, SES_ARMED, SES_SET_ARMED, SES_SID, SES_TRIPPED, SID_ALARM_PARTITION, SPT_BAUD, SPT_PATH, SPT_PRODUCT, SPT_SID, SPT_VENDOR, SWD_LOAD_LEVEL_STATUS, SWD_LOAD_LEVEL_TARGET, SWD_SET_LOAD_LEVEL, SWD_SID, SWP_SET_TARGET, SWP_SID, SWP_STATUS, SWP_TARGET, TEMPORARY_UPNP_ARGUMENT, TEMP_CURRENT, TEMP_SID, UIRT_COM_PORT, UIRT_FILE, UIRT_SID, UIRT_TYPE, Utils, WC_DOWN, WC_SID, WC_STATUS, WC_STOP, WC_STYPE, WC_TARGET, WC_UP, ZWDEVICE_FILE, ZWDEVICE_SID, ZWDEVICE_STYPE, ZWD_ASSOCIATION_GET, ZWD_ASSOCIATION_NUM, ZWD_ASSOCIATION_SET, ZWD_CAPABILITIES, ZWD_CONFIG, ZWD_CONFIGURED_ASSOC, ZWD_CONFIGURED_NAME, ZWD_CONFIGURED_VARIABLE, ZWD_DOCUMENTATION, ZWD_HEALTH, ZWD_INITIAL_NAME, ZWD_LAST_RESET, ZWD_LAST_ROUTE_UPD, ZWD_LAST_WAKEUP, ZWD_MANUAL_ROUTE, ZWD_MANUF_INFO, ZWD_MULTCH_CAPABIL, ZWD_MULTCH_ENDPOINT, ZWD_NEIGHBORS, ZWD_NEIGHBORS_INVERSE, ZWD_NODE_INFO, ZWD_NONCE_ACK, ZWD_POLL_SETTINGS, ZWD_SCENES, ZWD_SCENES_AS_EVENTS, ZWD_SCENES_TIMESTAMPS, ZWD_SPECIAL_ASSOC_DONE, ZWD_SPECIAL_CONFIG_DONE, ZWD_VARIABLES_GET, ZWD_VARIABLES_SET, ZWD_VERSION_INFO, ZWD_WAKEUP_INTERVAL, ZWN_ADD_NODES, ZWN_BACKUP_DONGLE, ZWN_COM_PORT, ZWN_DELAY_PROCESSING, ZWN_DOWNLOAD, ZWN_FILE, ZWN_HEAL_NETWORK, ZWN_HOME_ID, ZWN_INCLUSION_MODE, ZWN_LAST_DONGLE_BACKUP, ZWN_LAST_ERROR, ZWN_LAST_HEAL, ZWN_LAST_UPDATE, ZWN_LIMIT_NEIGHBORS, ZWN_LOCK_COM_PORT, ZWN_MULTIPLE, ZWN_NET_STATUS_ID, ZWN_NET_STATUS_TEXT, ZWN_NODETYPE, ZWN_NODE_ID, ZWN_POLL_ALL_NODES, ZWN_POLL_DELAY_DEADTIME, ZWN_POLL_DELAY_INITIAL, ZWN_POLL_ENABLED, ZWN_POLL_FREQUENCY, ZWN_POLL_MINDELAY, ZWN_PUT_BYTE, ZWN_RECONFIGURE_ALL, ZWN_REMOVE_NODES, ZWN_RESET_MODE, ZWN_RESET_NETWORK, ZWN_ROLE, ZWN_SCENE_IDS, ZWN_SEND_DATA, ZWN_SET_POLLING, ZWN_SID, ZWN_SIMULATE_INCOMING, ZWN_SOFT_RESET, ZWN_STYPE, ZWN_TIMEOUT, ZWN_UPDATE_NEIGHBORS, ZWN_UPDATE_NETWORK, ZWN_USE_45, ZWN_USE_MR, ZWN_VERSION_INFO, _JSAPI_ctx, _spinDialog, altuiSortByName, altuiSortByName2, api, application, cloneObject, commandSent, command_url, data_request_url, get_device_index, get_device_obj, get_device_state, get_event_definition, get_new_timer_id, get_node_index, get_node_obj, get_trigger_info, has_changes, hide_loading, jsonp, log_message, myInterface, new_scene_id, req, send_command_url, set_JSAPI_context, set_device_state, set_infobox, set_panel_html, show_loading, sortByName, sysinfoJson, trim, user_changes, xml_decode, xml_encode;

  jsonp = {
    ud: {
      devices: [],
      scenes: [],
      rooms: [],
      static_data: [],
      users: []
    }
  };

  sysinfoJson = {};

  user_changes = 0;

  data_request_url = window.location.pathname + '?';

  command_url = window.location.pathname.replace('/port_3480/data_request', '/port_49451');

  send_command_url = window.location.pathname.replace('/port_3480/data_request', '/port_3480');

  _JSAPI_ctx = {};

  set_JSAPI_context = function(ctx) {
    _JSAPI_ctx = $.extend({
      set_panel_html_callback: null,
      deviceid: 0,
      altuiid: NULL_DEVICE,
      controllerid: 0
    }, ctx);
    jsonp = MultiBox.initializeJsonp(_JSAPI_ctx.controllerid);
    sysinfoJson = MultiBox.initializeSysinfo(_JSAPI_ctx.controllerid);
    return application.userData = jsonp.ud;
  };

  xml_encode = function(str) {
    if (str == null) {
      alert("error in xml_encode: input undefined");
      return;
    }
    str = trim(str.toString());
    str = str.replace(new RegExp("[" + "&" + "]", "g"), "&amp;");
    str = str.replace(new RegExp("[" + "<" + "]", "g"), "&lt;");
    str = str.replace(new RegExp("[" + ">" + "]", "g"), "&gt;");
    str = str.replace(new RegExp("[" + "\"" + "]", "g"), "&quot;");
    str = str.replace(new RegExp("[" + "'" + "]", "g"), "&apos;");
    str = str.replace(/%/gi, '&#37;');
    return str;
  };

  xml_decode = function(str) {
    if (str == null) {
      alert("error in xml_decode: input undefined");
      return;
    }
    str = trim(str.toString());
    str = str.replace(new RegExp("&amp;", "g"), "&");
    str = str.replace(new RegExp("&lt;", "g"), "<");
    str = str.replace(new RegExp("&gt;", "g"), ">");
    str = str.replace(new RegExp("&quot;", "g"), "\"");
    str = str.replace(new RegExp("&apos;", "g"), "'");
    return str;
  };

  set_panel_html = function(html) {
    if ($.isFunction(_JSAPI_ctx.set_panel_html_callback)) {
      return _JSAPI_ctx.set_panel_html_callback(html);
    }
  };

  log_message = function(msg) {
    return PageMessage.message(msg, "info");
  };

  set_infobox = function(str, mode) {
    return PageMessage.message(str, mode === "success" || mode === "error" ? mode : "info");
  };

  has_changes = function(msg) {
    return PageMessage.message(msg, "info");
  };

  trim = function(stringToTrim) {
    return stringToTrim.replace(/^\s+|\s+$/g, "");
  };

  get_node_obj = function(nodeObj, nodeID) {
    var i, j, ref;
    for (i = j = 0, ref = nodeObj.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (nodeObj[i] && nodeObj[i].id === parseInt(nodeID)) {
        return nodeObj[i];
      }
    }
    return void 0;
  };

  get_node_index = function(nodeObj, nodeID) {
    var i, j, ref;
    for (i = j = 0, ref = nodeObj.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (nodeObj[i] && nodeObj[i].id === nodeID) {
        return i;
      }
    }
    return 0;
  };

  get_new_timer_id = function(timersArray) {
    var i, j, maxID, ref;
    maxID = 0;
    for (i = j = 0, ref = timersArray.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (timersArray[i].id > maxID) {
        maxID = timersArray[i].id;
      }
    }
    return maxID + 1;
  };

  _spinDialog = null;

  show_loading = function(message) {
    _spinDialog = DialogManager.createSpinningDialog(message);
    return _spinDialog.modal('show');
  };

  hide_loading = function() {
    return _spinDialog.modal('hide');
  };

  sortByName = function(a, b) {
    var x, y;
    x = a.name.toLowerCase();
    y = b.name.toLowerCase();
    if (x < y) {
      return -1;
    } else {
      if (x > y) {
        return 1;
      } else {
        return 0;
      }
    }
  };

  altuiSortByName = sortByName;

  altuiSortByName2 = function(a, b) {
    var x, y;
    x = a.Name.toLowerCase();
    y = b.Name.toLowerCase();
    if (x < y) {
      return -1;
    } else {
      if (x > y) {
        return 1;
      } else {
        return 0;
      }
    }
  };

  get_device_index = function(deviceID) {
    var i, j, ref;
    for (i = j = 0, ref = jsonp.ud.devices.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (jsonp.ud.devices[i] && jsonp.ud.devices[i].id === deviceID) {
        return i;
      }
    }
    return null;
  };

  get_device_obj = function(deviceID) {
    var i, j, ref;
    for (i = j = 0, ref = jsonp.ud.devices.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (jsonp.ud.devices[i] && jsonp.ud.devices[i].id === deviceID) {
        return jsonp.ud.devices[i];
      }
    }
    return null;
  };

  get_trigger_info = function(sceneID, triggerIndex) {
    var scene;
    scene = MultiBox.getSceneByID(_JSAPI_ctx.controllerid, sceneID);
    if (scene == null) {
      return null;
    }
    if (scene.triggers[triggerIndex] != null) {
      return scene.triggers[triggerIndex];
    } else {
      return null;
    }
  };

  cloneObject = function(obj) {
    var i, j, k, len, len1, out, x;
    if (Object.prototype.toString.call(obj) === '[object Array]') {
      out = [];
      for (i = j = 0, len = obj.length; j < len; i = ++j) {
        x = obj[i];
        out[i] = arguments.callee(x);
      }
      return out;
    } else {
      if (typeof obj === 'object') {
        out = {};
        for (k = 0, len1 = obj.length; k < len1; k++) {
          i = obj[k];
          out[i] = arguments.callee(obj[i]);
        }
      }
      return out;
    }
    return obj;
  };

  get_event_definition = function(DeviceType) {
    var datum, j, len, ref;
    ref = jsonp.ud.static_data;
    for (j = 0, len = ref.length; j < len; j++) {
      datum = ref[j];
      if ((datum != null) && datum.DeviceType === DeviceType) {
        return datum.eventList2;
      }
    }
  };

  new_scene_id = function() {
    return MultiBox.getNewSceneID(_JSAPI_ctx.controllerid);
  };

  get_device_state = function(deviceId, serviceId, variable, dynamic) {
    var device, result;
    device = MultiBox.getDeviceByID(_JSAPI_ctx.controllerid, deviceId);
    result = MultiBox.getStatus(device, serviceId, variable);
    return result;
  };

  set_device_state = function(deviceId, serviceId, variable, value, dynamic) {
    var device;
    if (dynamic == null) {
      dynamic = 0;
    }
    device = MultiBox.getDeviceByID(_JSAPI_ctx.controllerid, deviceId);
    MultiBox.setStatus(device, serviceId, variable, value, dynamic);
    return true;
  };

  commandSent = function() {};

  req = {
    sendCommand: function(query, callback, param) {
      return jQuery.ajax({
        url: data_request_url + query,
        success: function(response, status, obj) {
          if (callback != null) {
            return callback(obj.responseText, param);
          }
        }
      });
    }
  };

  Ajax = (function() {
    function Ajax() {}

    Ajax.prototype.Response = function(data, jqXHR) {
      return {
        getHeader: function(name) {
          return jqXHR.getResponseHeader(name) || null;
        },
        headerJSON: null,
        responseText: data
      };
    };

    Ajax.prototype.Request = function(url, opts) {
      var ajaxopts, controller, jqxhr, options, params, querystring, upnphelper, urlHead;
      ajaxopts = {};
      options = $.extend({
        method: "GET",
        parameters: {},
        onSuccess: null,
        onFailure: null,
        onComplete: null
      }, opts);
      urlHead = url;
      params = [];
      if ($.isArray(options.parameters)) {
        urlHead = urlHead + '?' + $.params(options.parameters);
        ajaxopts = {
          url: urlHead,
          type: options.method
        };
      } else {
        ajaxopts = {
          url: urlHead,
          type: options.method,
          data: options.parameters
        };
      }
      controller = MultiBox.getControllers()[_JSAPI_ctx.controllerid];
      upnphelper = controller.controller.getUPnPHelper();
      if (_JSAPI_ctx.controllerid > 0) {
        querystring = $.param(ajaxopts.data);
        ajaxopts.data = null;
        ajaxopts.url = upnphelper.proxify("http://" + controller.ip + ajaxopts.url + "?" + querystring);
      }
      return jqxhr = $.ajax(ajaxopts).done(function(data, textStatus, jqXHR) {
        return upnphelper.unproxifyResult(data, textStatus, jqXHR, function(data, textStatus, jqXHR) {
          var response;
          if ($.isFunction(options.onSuccess)) {
            response = new Response(data, jqXHR);
            return options.onSuccess(response);
          }
        });
      }).fail(function(jqXHR, textStatus, errorThrown) {
        if ($.isFunction(options.onFailure)) {
          return options.onFailure(textStatus);
        }
      }).always(function(data_jqXHR, textStatus, jqXHR_errorThrown) {
        if ($.isFunction(options.onComplete)) {
          return options.onComplete("");
        }
      });
    };

    return Ajax;

  })();

  Utils = (function() {
    function Utils() {}

    Utils.logDebug = function(message) {
      if ($.isPlainObject(window.AltuiDebug)) {
        return AltuiDebug.debug(message);
      } else {
        return console.info(message);
      }
    };

    Utils.logError = function(s) {
      PageMessage.message(s, "error");
      return AltuiDebug.debug("Utils.logError: " + s);
    };

    Utils.isValidIp = function(ip) {
      var reg;
      reg = new RegExp('^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:\\d{1,5})?$', 'i');
      return reg.test(ip);
    };

    Utils.getLangString = function(s1, s2) {
      return _T(s2);
    };

    Utils.xmlEncode = function(str) {
      return xml_encode(str);
    };

    return Utils;

  })();

  Interface = (function() {
    function Interface() {}

    Interface.showMessagePopup = function(msg, code) {
      return PageMessage.message(msg, "success");
    };

    Interface.showMessagePopupError = function(msg) {
      return PageMessage.message(msg, "error");
    };

    Interface.showStartupModalLoading = function() {
      return show_loading();
    };

    Interface.showModalLoading = function() {
      return show_loading();
    };

    Interface.hideModalLoading = function() {
      return hide_loading();
    };

    return Interface;

  })();

  myInterface = new Interface();

  DomPurify = (function() {
    function DomPurify() {}

    DomPurify.sanitize = function(str) {
      return str;
    };

    return DomPurify;

  })();

  application = (function() {
    function application() {
      this.userData = null;
    }

    application.prototype.sendCommandSaveUserData = function(bSilent) {};

    application.prototype.sendCommand = function(params, va_RegisterResult, va_SendError, deviceID) {};

    application.prototype.userDataRemove = function(type, id) {};

    application.prototype.luReload = function() {
      return MultiBox.reloadEngine(_JSAPI_ctx.controllerid);
    };

    application.prototype.getSceneObject = function(SceneID) {
      return MultiBox.getSceneByID(_JSAPI_ctx.controllerid, SceneID);
    };

    return application;

  })();

  DEVICETYPE_HOME_AUTO_GATEWAY = "urn:schemas-micasaverde-com:device:HomeAutomationGateway:1";

  DEVICETYPE_BINARY_LIGHT = "urn:schemas-upnp-org:device:BinaryLight:1";

  DEVICETYPE_DIMMABLE_LIGHT = "urn:schemas-upnp-org:device:DimmableLight:1";

  DEVICETYPE_THERMOSTAT = "urn:schemas-upnp-org:device:HVAC_ZoneThermostat:1";

  DEVICETYPE_HUMIDITY_SENSOR = "urn:schemas-micasaverde-com:device:HumiditySensor:1";

  DEVICETYPE_MULTI_IO = "urn:schemas-micasaverde-com:device:MultiIO:1";

  DEVICETYPE_DOOR_LOCK = "urn:schemas-micasaverde-com:device:DoorLock:1";

  DEVICETYPE_DOOR_SENSOR = "urn:schemas-micasaverde-com:device:DoorSensor:1";

  DEVICETYPE_ZWAVE_NETWORK = "urn:schemas-micasaverde-com:device:ZWaveNetwork:1";

  DEVICETYPE_INSTEON_NETWORK = "urn:schemas-micasaverde-com:device:InsteonNetwork:1";

  DEVICETYPE_USB_UIRT = "urn:schemas-micasaverde-com:device:USBUIRT:1";

  DEVICETYPE_TEMPERATURE_SENSOR = "urn:schemas-micasaverde-com:device:TemperatureSensor:1";

  DEVICETYPE_POWER_METER = "urn:schemas-micasaverde-com:device:PowerMeter:1";

  DEVICETYPE_MOTION_SENSOR = "urn:schemas-micasaverde-com:device:MotionSensor:1";

  DEVICETYPE_SMOKE_SENSOR = "urn:schemas-micasaverde-com:device:SmokeSensor:1";

  DEVICETYPE_LIGHT_SENSOR = "urn:schemas-micasaverde-com:device:LightSensor:1";

  DEVICETYPE_IR_TRANSMITTER = "urn:schemas-micasaverde-com:device:IrTransmitter:1";

  DEVICETYPE_WINDOW_COVERING = "urn:schemas-micasaverde-com:device:WindowCovering:1";

  DEVICETYPE_GENERIC_IO = "urn:schemas-micasaverde-com:device:GenericIO:1";

  DEVICETYPE_REMOTE_CONTROL = "urn:schemas-micasaverde-com:device:RemoteControl:1";

  DEVICETYPE_COMBO_DEVICE = "urn:schemas-micasaverde-com:device:ComboDevice:1";

  DEVICETYPE_CAMERA = "urn:schemas-upnp-org:device:DigitalSecurityCamera:1";

  DEVICETYPE_CAMERA2 = "urn:schemas-upnp-org:device:DigitalSecurityCamera:2";

  DEVICETYPE_SERIALPORT = "urn:micasaverde-org:device:SerialPort:1";

  DEVICETYPE_SCENE_CONTROLLER = "urn:schemas-micasaverde-com:device:SceneController:1";

  DEVICETYPE_SCENE_CONTR_LED = "urn:schemas-micasaverde-com:device:SceneControllerLED:1";

  DEVICETYPE_ENERGY_CALCULATOR = "urn:schemas-micasaverde-com:device:EnergyCalculator:1";

  DEVICETYPE_TEMP_LEAK_SENSOR = "urn:schemas-micasaverde-com:device:TemperatureLeakSensor:1";

  DEVICETYPE_SCENE = "urn:schemas-micasaverde-com:device:Scene:1";

  DEVICETYPE_TV = "urn:schemas-micasaverde-com:device:tv:1";

  DEVICETYPE_CABLE = "urn:schemas-micasaverde-com:device:cable:1";

  DEVICETYPE_SATELLITE = "urn:schemas-micasaverde-com:device:satellite:1";

  DEVICETYPE_VIDEO_ACCESSORY = "urn:schemas-micasaverde-com:device:videoaccessory:1";

  DEVICETYPE_VCR_DVR = "urn:schemas-micasaverde-com:device:vcrdvd:1";

  DEVICETYPE_DVD_BLURAY = "urn:schemas-micasaverde-com:device:dvdbluray:1";

  DEVICETYPE_RECEIVER = "urn:schemas-micasaverde-com:device:receiver:1";

  DEVICETYPE_AMP = "urn:schemas-micasaverde-com:device:amp:1";

  DEVICETYPE_CD = "urn:schemas-micasaverde-com:device:cd:1";

  DEVICETYPE_MISC_HOME_CONTROL = "urn:schemas-micasaverde-com:device:mischomecontrol:1";

  DEVICETYPE_AV_MISC = "urn:schemas-micasaverde-com:device:avmisc:1";

  DEVICETYPE_VIRTUAL_DEVICE = "urn:schemas-micasaverde-com:device:VirtualDevice:1";

  DEVICEFILE_BINARY_LIGHT = "D_BinaryLight1.xml";

  DEVICEFILE_DIMMABLE_LIGHT = "D_DimmableLight1.xml";

  DEVICEFILE_THERMOSTAT = "D_HVAC_ZoneThermostat1.xml";

  DEVICEFILE_HUMIDITY_SENSOR = "D_HumiditySensor1.xml";

  DEVICEFILE_MULTI_IO = "D_GC100.xml";

  DEVICEFILE_DOOR_LOCK = "D_DoorLock1.xml";

  DEVICEFILE_DOOR_SENSOR = "D_DoorSensor1.xml";

  DEVICEFILE_ZWAVE_NETWORK = "D_ZWaveNetwork.xml";

  DEVICEFILE_INSTEON_NETWORK = "D_InsteonNetwork.xml";

  DEVICEFILE_USB_UIRT = "D_USB_UIRT.xml";

  DEVICEFILE_TEMPERATURE_SENSOR = "D_TemperatureSensor1.xml";

  DEVICEFILE_POWER_METER = "D_PowerMeter1.xml";

  DEVICEFILE_MOTION_SENSOR = "D_MotionSensor1.xml";

  DEVICEFILE_SMOKE_SENSOR = "D_SmokeSensor1.xml";

  DEVICEFILE_LIGHT_SENSOR = "D_LightSensor1.xml";

  DEVICEFILE_IR_TRANSMITTER = "D_IrTransmitter1.xml";

  DEVICEFILE_WINDOW_COVERING = "D_WindowCovering1.xml";

  DEVICEFILE_GENERIC_IO = "D_GenericIO1.xml";

  DEVICEFILE_REMOTE_CONTROL = "D_RemoteControl1.xml";

  DEVICEFILE_COMBO_DEVICE = "D_ComboDevice1.xml";

  DEVICEFILE_CAMERA = "D_DigitalSecurityCamera1.xml";

  DEVICEFILE_SCENE_CONTROLLER = "D_SceneController1.xml";

  DEVICEFILE_SCENE_CONTR_LED = "D_SceneControllerLED1.xml";

  DEVICEFILE_ENERGY_CALCULATOR = "D_EnergyCalculator1.xml";

  DEVICEFILE_AV_MISC = "D_AvMisc1.xml";

  DEVICEFILE_TEMP_LEAK_SENSOR = "D_TemperatureLeakSensor1.xml";

  DEVICEFILE_AV_SCENE = "D_Scene1.xml";

  TEMPORARY_UPNP_ARGUMENT = "TEMPORARY_UPNP_ARGUMENT";

  HAGEVICE_FILE = "S_HomeAutomationGateway1.xml";

  HAGEVICE_SID = "urn:micasaverde-com:serviceId:HomeAutomationGateway1";

  HAGEVICE_STYPE = "urn:schemas-micasaverde-org:service:HomeAutomationGateway:1";

  HAG_ACTIVE_SCENES = "ActiveScenes";

  HAG_DATAVERSION_USERDATA = "DataVersionUserData";

  HAG_DATAVERSION_STATUS = "DataVersionStatus";

  HAG_ENERGY_DOW = "EnergyDOW";

  HAG_ENERGY_TIME_OF_DAY = "GetUserData";

  HAG_NUM_LIGHTS = "GetUserData";

  HAG_THERMOSTAT_ON = "GetUserData";

  HAG_ENERGY_DOW = "GetUserData";

  HAG_GET_USER_DATA = "GetUserData";

  HAG_MODIFY_USER_DATA = "ModifyUserData";

  HAG_MODIFY_GET_VARIABLE = "GetVariable";

  HAG_MODIFY_SET_VARIABLE = "SetVariable";

  HAG_MODIFY_GET_STATUS = "GetStatus";

  HAG_MODIFY_GET_ACTIONS = "GetActions";

  HAG_MODIFY_CREATE_DEVICE = "CreateDevice";

  HAG_MODIFY_DELETE_DEVICE = "DeleteDevice";

  HAG_MODIFY_CREATE_PLUGIN = "CreatePlugin";

  HAG_MODIFY_DELETE_PLUGIN = "DeletePlugin";

  HAG_MODIFY_CREATE_PLUGIN_DEVICE = "CreatePluginDevice";

  HAG_IMPORT_UPNP_DEVICE = "ImportUpnpDevice";

  HAG_PROCESS_CHILD = "ProcessChildDevices";

  HAG_RELOAD = "Reload";

  HAG_RUN_SCENE = "RunScene";

  HAG_RUN_LUA = "RunLua";

  HAG_LOG_IP_REQUEST = "LogIpRequest";

  HADEVICE_FILE = "S_HaDevice1.xml";

  HADEVICE_SID = "urn:micasaverde-com:serviceId:HaDevice1";

  HADEVICE_STYPE = "urn:schemas-micasaverde-com:service:HaDevice:1";

  HAD_ENERGY_LOG = "EnergyLog";

  HAD_IOPORT_DEVICE = "IODevice";

  HAD_IOPORT_DEVICE_XREF = "IODeviceXRef";

  HAD_IOPORT_MAX_TIME = "MaxTime";

  HAD_IOPORT_PORT = "IOPort";

  HAD_IGNORE_ROOM = "IgnoreRoom";

  HAD_COMM_FAILURE = "CommFailure";

  HAD_POLLING_ENABLED = "PollingEnabled";

  HAD_POLL_MIN_DELAY = "PollMinDelay";

  HAD_CONFIGURED = "Configured";

  HAD_JOBID = "JobID";

  HAD_REVERSE = "ReverseOnOff";

  HAD_LAST_UPDATE = "LastUpdate";

  HAD_AUTO_CONFIGURE = "AutoConfigure";

  HAD_LAST_TIME_CHECK = "LastTimeCheck";

  HAD_LAST_TIME_OFFSET = "LastTimeOffset";

  HAD_FIRST_CONFIGURED = "FirstConfigured";

  HAD_BATTERY_LEVEL = "BatteryLevel";

  HAD_BATTERY_DATE = "BatteryDate";

  HAD_BATTERY_ALARM = "BatteryAlarm";

  HAD_DOCUMENTATION = "Documentation";

  HAD_RECONFIGURE = "Reconfigure";

  HAD_REMOVE = "Remove";

  HAD_POLL = "Poll";

  HAD_SET_POLL_FREQUENCY = "SetPollFrequency";

  HAD_STRESS_TEST = "StressTest";

  HAD_TOGGLE_STATE = "ToggleState";

  ZWN_FILE = "S_ZWaveNetwork1.xml";

  ZWN_SID = "urn:micasaverde-com:serviceId:ZWaveNetwork1";

  ZWN_STYPE = "urn:schemas-micasaverde-org:service:ZWaveNetwork:1";

  ZWN_RESET_NETWORK = "ResetNetwork";

  ZWN_UPDATE_NETWORK = "UpdateNetwork";

  ZWN_UPDATE_NEIGHBORS = "UpdateNeighbors";

  ZWN_RECONFIGURE_ALL = "ReconfigureAllNodes";

  ZWN_REMOVE_NODES = "RemoveNodes";

  ZWN_ADD_NODES = "AddNodes";

  ZWN_DOWNLOAD = "DownloadNetwork";

  ZWN_PUT_BYTE = "PutByte";

  ZWN_HEAL_NETWORK = "HealNetwork";

  ZWN_SET_POLLING = "SetPolling";

  ZWN_SEND_DATA = "SendData";

  ZWN_POLL_ALL_NODES = "PollAllNodes";

  ZWN_SOFT_RESET = "SoftReset";

  ZWN_BACKUP_DONGLE = "BackupDongle";

  ZWN_SCENE_IDS = "SceneIDs";

  ZWN_LAST_UPDATE = "LastUpdate";

  ZWN_LAST_DONGLE_BACKUP = "LastDongleBackup";

  ZWN_NET_STATUS_ID = "NetStatusID";

  ZWN_NET_STATUS_TEXT = "NetStatusText";

  ZWN_USE_45 = "Use45";

  ZWN_USE_MR = "UseMR";

  ZWN_LIMIT_NEIGHBORS = "LimitNeighbors";

  ZWN_COM_PORT = "ComPort";

  ZWN_LOCK_COM_PORT = "LockComPort";

  ZWN_NODE_ID = "NodeID";

  ZWN_VERSION_INFO = "VersionInfo";

  ZWN_HOME_ID = "HomeID";

  ZWN_ROLE = "Role";

  ZWN_RESET_MODE = "ResetMode";

  ZWN_INCLUSION_MODE = "InclusionMode";

  ZWN_NODETYPE = "NodeType";

  ZWN_TIMEOUT = "Timeout";

  ZWN_MULTIPLE = "Multiple";

  ZWN_SIMULATE_INCOMING = "SimulateIncomingData";

  ZWN_POLL_ENABLED = "PollingEnabled";

  ZWN_POLL_DELAY_INITIAL = "PollDelayInitial";

  ZWN_POLL_DELAY_DEADTIME = "PollDelayDeadTime";

  ZWN_POLL_MINDELAY = "PollMinDelay";

  ZWN_POLL_FREQUENCY = "PollFrequency";

  ZWN_LAST_ERROR = "LastError";

  ZWN_DELAY_PROCESSING = "DelayProcessing";

  ZWDEVICE_FILE = "S_ZWaveDevice1.xml";

  ZWDEVICE_SID = "urn:micasaverde-com:serviceId:ZWaveDevice1";

  ZWDEVICE_STYPE = "urn:schemas-micasaverde-com:service:ZWaveDevice:1";

  ZWD_POLL_SETTINGS = "PollSettings";

  ZWD_MULTCH_ENDPOINT = "MultiChEndpoint";

  ZWD_MULTCH_CAPABIL = "MultiChCapabilities";

  ZWD_NEIGHBORS = "Neighbors";

  ZWD_CAPABILITIES = "Capabilities";

  ZWD_CONFIG = "Configuration";

  ZWD_LAST_RESET = "LastReset";

  ZWD_SCENES_AS_EVENTS = "ScenesAsEvents";

  ZWD_SCENES_TIMESTAMPS = "ScenesTimestamp";

  ZWD_WAKEUP_INTERVAL = "WakeupInterval";

  ZWD_LAST_WAKEUP = "LastWakeup";

  ZWD_LAST_ROUTE_UPD = "LastRouteUpdate";

  ZWD_VARIABLES_GET = "VariablesGet";

  ZWD_VARIABLES_SET = "VariablesSet";

  ZWD_ASSOCIATION_GET = "AssociationGet";

  ZWD_ASSOCIATION_SET = "AssociationSet";

  ZWD_ASSOCIATION_NUM = "AssociationNum";

  ZWD_NONCE_ACK = "NonceACK";

  ZWD_MANUF_INFO = "ManufacturerInfo";

  ZWD_VERSION_INFO = "VersionInfo";

  ZWD_NODE_INFO = "NodeInfo";

  ZWD_INITIAL_NAME = "InitialName";

  ZWD_CONFIGURED_NAME = "ConfiguredName";

  ZWD_CONFIGURED_VARIABLE = "ConfiguredVariable";

  ZWD_CONFIGURED_ASSOC = "ConfiguredAssoc";

  ZWD_SPECIAL_CONFIG_DONE = "SpecialConfigDone";

  ZWD_SPECIAL_ASSOC_DONE = "SpecialAssocDone";

  ZWD_DOCUMENTATION = "Documentation";

  ZWD_MANUAL_ROUTE = "ManualRoute";

  INN_FILE = "S_InsteonNetwork1.xml";

  INN_SID = "urn:micasaverde-com:serviceId:InsteonNetwork1";

  INN_STYPE = "urn:schemas-micasaverde-org:service:InsteonNetwork:1";

  INN_RESET_NETWORK = "ResetNetwork";

  INN_REMOVE_NODES = "RemoveNodes";

  INN_ADD_NODES = "AddNodes";

  INN_STOP_ADDREM_NODES = "StopAddRemoveNodes";

  INN_SEND_DATA = "SendData";

  INN_COM_PORT = "ComPort";

  INN_LOCK_COM_PORT = "LockComPort";

  INN_LAST_ERROR = "LastError";

  INN_LAST_UPDATE = "LastUpdate";

  INN_NET_STATUS_ID = "NetStatusID";

  INN_NET_STATUS_TEXT = "NetStatusText";

  INN_POLL_ENABLED = "PollingEnabled";

  INN_POLL_DELAY_INITIAL = "PollDelayInitial";

  INN_POLL_DELAY_DEADTIME = "PollDelayDeadTime";

  INN_POLL_MINDELAY = "PollMinDelay";

  INN_POLL_FREQUENCY = "PollFrequency";

  INN_NODE_ID = "NodeID";

  INN_SL_X10_CODE = "sl_X10Code";

  INN_VERSION_INFO = "VersionInfo";

  INN_HOME_ID = "HomeID";

  INN_ROLE = "Role";

  INN_RESET_MODE = "ResetMode";

  INN_INCLUSION_MODE = "InclusionMode";

  INN_NODETYPE = "NodeType";

  INN_TIMEOUT = "Timeout";

  INN_MULTIPLE = "Multiple";

  INN_SIMULATE_INCOMING = "SimulateIncomingData";

  INDEVICE_FILE = "S_InsteonDevice1.xml";

  INDEVICE_SID = "urn:micasaverde-com:serviceId:InsteonDevice1";

  INDEVICE_STYPE = "urn:schemas-micasaverde-com:service:InsteonDevice:1";

  IND_POLL_SETTINGS = "PollSettings";

  IND_MULTCH_ENDPOINT = "MultiChEndpoint";

  IND_MULTCH_CAPABIL = "MultiChCapabilities";

  IND_NEIGHBORS = "Neighbors";

  IND_CAPABILITIES = "Capabilities";

  IND_CONFIG = "Configuration";

  IND_LAST_RESET = "LastReset";

  IND_SCENES_AS_EVENTS = "ScenesAsEvents";

  IND_WAKEUP_INTERVAL = "WakeupInterval";

  IND_LAST_WAKEUP = "LastWakeup";

  IND_LAST_ROUTE_UPD = "LastRouteUpdate";

  IND_VARIABLES_GET = "VariablesGet";

  IND_VARIABLES_SET = "VariablesSet";

  IND_ASSOCIATION_GET = "AssociationGet";

  IND_ASSOCIATION_SET = "AssociationSet";

  IND_MANUF_INFO = "ManufacturerInfo";

  IND_VERSION_INFO = "VersionInfo";

  IND_UPDATED_NAME = "UpdatedName";

  UIRT_FILE = "S_USBUIRT.xml";

  UIRT_SID = "urn:micasaverde-com:serviceId:USBUIRT1";

  UIRT_TYPE = "urn:schemas-micasaverde-com:service:USBUIRT:1";

  UIRT_COM_PORT = "ComPort";

  CAMDEVICE_FILE = "S_Camera1.xml";

  CAMDEVICE_SID = "urn:micasaverde-com:serviceId:Camera1";

  CAMDEVICE_STYPE = "urn:schemas-micasaverde-com:service:Camera:1";

  CAM_USERNAME = "Username";

  CAM_PASSWORD = "Password";

  CAM_RELATED_SENSORS = "RelatedSensors";

  CAM_SENSOR_ARCHIVE_SEC = "SensorArchiveSeconds";

  CAM_RELATED_LIGHTS = "RelatedLights";

  CAM_LIGHT_OPTIONS = "LightOptions";

  CAM_AUTO_ARCH_SEC = "AutoArchiveSeconds";

  CAM_AUTO_PRES_DAYS = "AutoArchivePreserveDays";

  CAM_URL = "URL";

  CAM_DIRECT_URL = "DirectStreamingURL";

  PTZ_FILE = "S_PanTiltZoom1.xml";

  PTZ_SID = "urn:micasaverde-com:serviceId:PanTiltZoom1";

  PTZ_STYPE = "urn:schemas-micasaverde-com:service:PanTiltZoom:1";

  PTZ_LEFT = "MoveLeft";

  PTZ_RIGHT = "MoveRight";

  PTZ_UP = "MoveUp";

  PTZ_DOWN = "MoveDown";

  PTZ_IN = "ZoomIn";

  PTZ_OUT = "ZoomOut";

  SWP_SID = "urn:upnp-org:serviceId:SwitchPower1";

  SWP_SET_TARGET = "SetTarget";

  SWP_STATUS = "Status";

  SWP_TARGET = "Target";

  WC_SID = "urn:upnp-org:serviceId:WindowCovering1";

  WC_UP = "Up";

  WC_DOWN = "Down";

  WC_STOP = "Stop";

  WC_STATUS = "Status";

  WC_TARGET = "Target";

  SWD_SID = "urn:upnp-org:serviceId:Dimming1";

  SWD_SET_LOAD_LEVEL = "SetLoadLevelTarget";

  SWD_LOAD_LEVEL_STATUS = "LoadLevelStatus";

  SWD_LOAD_LEVEL_TARGET = "LoadLevelTarget";

  DL_SID = "urn:micasaverde-com:serviceId:DoorLock1";

  DL_SET_TARGET = "SetTarget";

  DL_SET_PIN = "SetPin";

  DL_CLEAR_PIN = "ClearPin";

  DL_SET_PIN_DATE = "SetPinValidityDate";

  DL_SET_PIN_WEEK = "SetPinValidityWeekly";

  DL_CLEAR_PIN_VALID = "ClearPinValidity";

  DL_STATUS = "Status";

  DL_TARGET = "Target";

  DL_SL_USER_CODE = "sl_UserCode";

  DL_SL_PIN_FAILED = "sl_PinFailed";

  DL_SL_LOCK_BUTTON = "sl_LockButton";

  DL_SL_LOCK_FAILURE = "sl_LockFailure";

  DL_SL_UNAUTH_USER = "sl_UnauthUser";

  DL_SL_LOW_BATTERY = "sl_LowBattery";

  DL_SL_VERY_LOW_BATTERY = "sl_VeryLowBattery";

  DL_PIN_CODES = "PinCodes";

  DL_NUM_SCHEDULES = "NumSchedules";

  HVACO_SID = "urn:upnp-org:serviceId:HVAC_UserOperatingMode1";

  HVACO_SET_MODE = "SetModeTarget";

  HVACO_STATUS = "ModeStatus";

  HVACS_SID = "urn:micasaverde-com:serviceId:HVAC_OperatingState1";

  HVACS_STATE = "ModeState";

  HVACF_SID = "urn:upnp-org:serviceId:HVAC_FanOperatingMode1";

  HVACF_SET_MODE = "SetMode";

  HVACF_STATUS = "Mode";

  HVACHEAT_SID = "urn:upnp-org:serviceId:TemperatureSetpoint1_Heat";

  HVACCOOL_SID = "urn:upnp-org:serviceId:TemperatureSetpoint1_Cool";

  HVACHC_SETPOINT = "SetCurrentSetpoint";

  HVACHC_CURRENTSP = "CurrentSetpoint";

  TEMP_SID = "urn:upnp-org:serviceId:TemperatureSensor1";

  TEMP_CURRENT = "CurrentTemperature";

  LIGHT_SID = "urn:micasaverde-com:serviceId:LightSensor1";

  LIGHT_CURRENT = "CurrentLevel";

  HUM_SID = "urn:micasaverde-com:serviceId:HumiditySensor1";

  HUM_CURRENT = "CurrentLevel";

  SES_SID = "urn:micasaverde-com:serviceId:SecuritySensor1";

  SES_ARMED = "Armed";

  SES_TRIPPED = "Tripped";

  SES_SET_ARMED = "SetArmed";

  ENE_SID = "urn:micasaverde-com:serviceId:EnergyMetering1";

  ENE_KWH = "KWH";

  ENE_WATTS = "Watts";

  ENE_ACTUAL = "ActualUsage";

  ENE_USER_SUPPLIED = "UserSuppliedWattage";

  IRT_SID = "urn:micasaverde-com:serviceId:IrTransmitter1";

  IRT_SENDPRONTO = "SendProntoCode";

  SPT_SID = "urn:micasaverde-org:serviceId:SerialPort1";

  SPT_PATH = "path";

  SPT_BAUD = "baud";

  SPT_VENDOR = "vendor";

  SPT_PRODUCT = "product";

  SCR_SID = "urn:micasaverde-com:serviceId:SceneController1";

  SCR_SL_SCENE_ACTIVATED = "sl_SceneActivated";

  SCR_SL_SCENE_DEACTIVATED = "sl_SceneDeactivated";

  SCR_SCENES = "Scenes";

  SCR_LAST_SCENE_ID = "LastSceneID";

  SCR_LAST_SCENE_TIME = "LastSceneTime";

  SCR_MANAGE_LEDS = "ManageLeds";

  SCR_NUM_BUTTONS = "NumButtons";

  SCR_FIRES_OFF_EVENTS = "FiresOffEvents";

  SCR_SCENE_SHORTCUTS = "SceneShortcuts";

  SCL_SID = "urn:micasaverde-com:serviceId:SceneControllerLED1";

  SCL_SET_LIGHT = "SetLight";

  SCL_LIGHT_SETTINGS = "LightSettings";

  GIO_SID = "urn:micasaverde-com:serviceId:GenericIO";

  GIO_IS_INPUT = "IsInput";

  GIO_DEFAULT_STATE = "DefaultState";

  ZWN_LAST_HEAL = "LastHeal";

  ZWD_HEALTH = "Health";

  ZWD_NEIGHBORS_INVERSE = "NeighborsInverse";

  IR_SID = "urn:micasaverde-com:serviceId:IrDevice1";

  IR_PROPRIETARY = "ProprietaryCodeset";

  ZWD_SCENES = "Scenes";

  CAM_PRE_ROLL_BUFFER = "PreRollBuffer";

  DEVICE_CATEGORY_INTERFACE = 1;

  DEVICE_CATEGORY_DIMMABLE_LIGHT = 2;

  DEVICE_CATEGORY_SWITCH = 3;

  DEVICE_CATEGORY_SECURITY_SENSOR = 4;

  DEVICE_CATEGORY_HVAC = 5;

  DEVICE_CATEGORY_CAMERA = 6;

  DEVICE_CATEGORY_DOOR_LOCK = 7;

  DEVICE_CATEGORY_WINDOW_COV = 8;

  DEVICE_CATEGORY_REMOTE_CONTROL = 9;

  DEVICE_CATEGORY_IR_TX = 10;

  DEVICE_CATEGORY_GENERIC_IO = 11;

  DEVICE_CATEGORY_GENERIC_SENSOR = 12;

  DEVICE_CATEGORY_SERIAL_PORT = 13;

  DEVICE_CATEGORY_SCENE_CONTROLLER = 14;

  DEVICE_CATEGORY_AV = 15;

  DEVICE_CATEGORY_HUMIDITY = 16;

  DEVICE_CATEGORY_TEMPERATURE = 17;

  DEVICE_CATEGORY_LIGHT = 18;

  DEVICE_CATEGORY_ZWAVE_INT = 19;

  DEVICE_CATEGORY_INSTEON_INT = 20;

  DEVICE_CATEGORY_POWER_METER = 21;

  DEVICE_CATEGORY_ALARM_PANEL = 22;

  DEVICE_CATEGORY_ALARM_PARTITION = 23;

  SERVICE_TYPE_IR_TRANSMITTER = 'urn:schemas-micasaverde-com:service:IrTransmitter:1';

  SID_ALARM_PARTITION = 'urn:micasaverde-com:serviceId:AlarmPartition2';

  WC_STYPE = 'urn:schemas-upnp-org:service:WindowCovering:1';

  DEVICETYPE_ALARM_PARTITION = 'urn:schemas-micasaverde-com:device:AlarmPartition:1';

  ALARM_PARTITION_SID = 'urn:micasaverde-com:serviceId:AlarmPartition1';

  ALARM_PARTITION_ARMED = 'Armed';

  ALARM_PARTITION_STAYARMED = 'StayArmed';

  ALARM_PARTITION_DISARMED = 'Disarmed';

  ALARM_PARTITION_BREACH = 'Breach';

  api = (function() {
    function api() {}

    api.version = "UI7";

    api.ui = {
      updateDevice: function(deviceId, value, txt) {
        var device, name;
        if (txt && txt.length >= 2) {
          device = MultiBox.getDeviceByID(_JSAPI_ctx.controllerid, deviceId);
          name = txt.substring(txt.lastIndexOf('.') + 1);
          return MultiBox.setAttr(device, "ip", value, null);
        }
      },
      startupShowModalLoading: function() {
        return show_loading();
      }
    };

    api.cloneObject = function(obj) {
      return cloneObject(obj);
    };

    api.getCommandURL = function() {
      return command_url;
    };

    api.getSendCommandURL = function() {
      return send_command_url;
    };

    api.getDataRequestURL = function() {
      return data_request_url;
    };

    api.getCpanelContent = function() {
      return "";
    };

    api.getListOfDevices = function() {
      return jsonp.ud.devices;
    };

    api.getCPanelDeviceId = function() {
      return _JSAPI_ctx.deviceid;
    };

    api.getCurrentHouseMode = function(onSuccess, onFailure, context) {
      return MultiBox.getHouseMode(function(mode) {
        if (!mode) {
          if (onFailure) {
            return onFailure.call(context);
          }
        } else {
          if (onSuccess) {
            return onSuccess.call(context, mode);
          }
        }
      });
    };

    api.setCurrentHouseMode = function(modeValue, onSuccess, onFailure, context) {
      return MultiBox.setHouseMode(modeValue, function(mode) {
        if (!mode) {
          if (onFailure) {
            return onFailure.call(context);
          }
        } else {
          if (onSuccess) {
            return onSuccess.call(context, mode);
          }
        }
      });
    };

    api.getDeviceIndex = function(deviceid) {
      var elem, idx, j, len, ref;
      ref = jsonp.ud.devices;
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        elem = ref[idx];
        if (elem.id === deviceid) {
          return idx;
        }
      }
      return null;
    };

    api.getDeviceObject = function(deviceid) {
      var elem, idx, j, len, ref;
      ref = jsonp.ud.devicesy;
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        elem = ref[idx];
        if (elem.id === deviceid) {
          return elem;
        }
      }
      return null;
    };

    api.setCpanelContent = function(html) {
      return set_panel_html(html);
    };

    api.getDeviceStateVariable = function(deviceId, service, variable, options) {
      return get_device_state(deviceId, service, variable, options && options.dynamic);
    };

    api.getDeviceState = function(deviceId, service, variable, options) {
      return this.getDeviceStateVariable(deviceId, service, variable, options);
    };

    api.getDeviceTemplate = function(deviceId) {
      return false;
    };

    api.getDisplayedDeviceName = function(deviceId) {
      var device;
      device = this.getDeviceObject(deviceId);
      if ((device != null) && device.id !== 0) {
        return device.name;
      }
      return 'unnamed device';
    };

    api.getEventDefinition = function(deviceType) {
      var _devicetypesDB, dt, eventList2, j, len, ui_static_data;
      _devicetypesDB = MultiBox.getDeviceTypesDB(_JSAPI_ctx.controllerid);
      dt = _devicetypesDB[deviceType];
      eventList2 = {};
      for (j = 0, len = dt.length; j < len; j++) {
        ui_static_data = dt[j];
        if (ui_static_data.eventList2 != null) {
          eventList2 = $.extend(true, eventList2, ui_static_data.eventList2);
        }
      }
      return eventList2;
    };

    api.setDeviceStateVariable = function(deviceId, service, variable, value, options) {
      return set_device_state(deviceId, service, variable, value, options && options.dynamic);
    };

    api.setDeviceAttribute = function(deviceId, attributeName, attributeBalue, options) {
      var device;
      device = MultiBox.getDeviceByID(_JSAPI_ctx.controllerid, deviceId);
      return MultiBox.setAttr(device, attributeName, attributeValue, function(result) {
        if (options && $.isFunction(options.callback)) {
          return options.callback();
        }
      });
    };

    api.setDeviceState = function(deviceId, service, variable, value, options) {
      return this.setDeviceStateVariable(deviceId, service, variable, value, options);
    };

    api.setDeviceStateVariablePersistent = function(deviceId, service, variable, value, options) {
      return set_device_state(deviceId, service, variable, value, -1);
    };

    api.setDeviceStatePersistent = function(deviceId, service, variable, value, options) {
      return this.setDeviceStateVariablePersistent(deviceId, service, variable, value, options);
    };

    api.getListOfSupportedEvents = function() {
      return EventBus.getEventSupported();
    };

    api.getLuSdata = function(onSuccess, onFailure, context) {
      var jqxhr, url;
      url = "data_request?id=sdata&output_format=json";
      return jqxhr = $.ajax({
        url: url,
        type: "GET",
        dataType: "text",
        cache: false
      }).done(function(data, textStatus, jqXHR) {
        var successData;
        if ($.isFunction(onSuccess)) {
          successData = {
            responseText: jqXHR.responseText,
            status: jqXHR.status
          };
          return onSuccess.call(context, successData);
        }
      }).fail(function(jqXHR, textStatus, errorThrown) {
        var errorData;
        if ($.isFunction(onFailure)) {
          errorData = {
            responseText: jqXHR.responseText,
            status: jqXHR.status
          };
          return onFailure.call(context, errorData);
        }
      }).always(function() {});
    };

    api.getSceneDescription = function(sceneId, options) {
      var clone, scene;
      scene = this.getSceneByID(sceneId);
      clone = cloneObject(scene);
      if (options) {
        if (options.hideTriggers) {
          delete clone['triggers'];
        }
        if (options.hideSchedules) {
          delete clone['timers'];
        }
        if (options.hideActions) {
          delete clone['groups'];
        }
      }
      return JSON.stringify(clone);
    };

    api.registerEventHandler = function(eventName, object, functionName) {
      return EventBus.registerEventHandler(eventName, window, function() {
        var func, theArgs;
        theArgs = arguments;
        theArgs = [].slice.call(theArgs, 1);
        func = object[functionName];
        return func.apply(object, theArgs);
      });
    };

    api.performActionOnDevice = function(deviceId, service, action, options) {
      var device;
      options = $.extend({
        actionArguments: {},
        onFailure: null,
        onSuccess: null,
        context: null
      }, options);
      device = MultiBox.getDeviceByID(_JSAPI_ctx.controllerid, deviceId);
      return MultiBox.runAction(device, service, action, options.actionArguments, function(data, textStatus, jqXHR) {
        if (data == null) {
          if (options.onFailure) {
            return options.onFailure.call(options.context, {
              responseText: jqXHR.responseText,
              status: jqXHR.status
            });
          }
        } else {
          if (options.onSuccess) {
            return options.onSuccess.call(options.context, {
              responseText: data,
              status: jqXHR.status
            });
          }
        }
      });
    };

    api.performLuActionOnDevice = function(deviceId, service, action, options) {
      return this.performActionOnDevice(deviceId, service, action, options);
    };

    api.runUpnpCode = function(code, options, onSuccess, onFailure, context) {
      return MultiBox.runLua(_JSAPI_ctx.controllerid, code, function(data) {
        if (data == null) {
          if (onFailure) {
            return onFailure.call(context, null);
          }
        } else {
          if (onSuccess) {
            return onSuccess.call(context, data);
          }
        }
      });
    };

    return api;

  })();

}).call(this);
